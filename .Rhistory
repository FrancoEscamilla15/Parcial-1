#### Enrique Franco García####
red <- read.csv("Amigos.csv")
red
row.names (red) <- red [ ,1]
red <- red [ ,-1]
red <- red [-2, ]
red <- red [ ,-2]
red <- as.matrix (red)
#### Enrique Franco García####
library(igraph)
ared <- graph_from_adjacency_matrix(red, mode= "directed") #A partir de la matriz
#la convierto en matriz de adyacencia para de esta manera poder indicar que es una red dirigida
#1. Grafique la red
V(ared)$size <- degree(ared, mode = "in")*3
plot(ared, edge.arrow.size=.4, edge.curved=.4)
plot(ared, edge.arrow.size = .5, edge.curved =.8)
plot(ared, edge.arrow.size = .2, edge.curved =.8)
#además uso "in", esto le va a indicar a R que debe de tomar en cuenta unicamente las entradas
sort(red_pop, decreasing = T) #De esta manera los ordeno de mayor a menor usando sort y
#2. Determine a las tres personas con más amigues
red_pop <- degree(ared, mode = "in") #Creo un nuevo objeto y uso la funcion degree
#### Enrique Franco García####
library(igraph)
#2. Determine a las tres personas con más amigues
red_pop <- degree(ared, mode = "in") #Creo un nuevo objeto y uso la funcion degree
#además uso "in", esto le va a indicar a R que debe de tomar en cuenta unicamente las entradas
sort(red_pop, decreasing = T) #De esta manera los ordeno de mayor a menor usando sort y
pop <- sort(red_pop, decreasing = T) [1:3]
pop
#3. Determine a las tres personas que consideran que tiene más amigues
red_amigables <- degree(ared, mode = "out") #Lo hago igual que en el ejercicio 2 solo que aqui
#uso el modo "out" ya que quiero unicamente las salidas
amigables <- sort(red_amigables, decreasing = T) [1:3]
amigables
#5. Clusteriza la red con al menos dos métodos y determine cuáles son los clústers.
cluster1 <- cluster_leiden(red)
#5. Clusteriza la red con al menos dos métodos y determine cuáles son los clústers.
cluster1 <- cluster_leiden(ared)
cluster2 <- cluster_spinglass(red)
#6. Calcule el diámetro
diameter(red)
#6. Calcule el diámetro
diameter("Amigos.csv")
#6. Calcule el diámetro
diameter("Amigos.csv")
#6. Calcule el diámetro
diameter(ared)
cluster2 <- cluster_spinglass(ared)
#5. Clusteriza la red con al menos dos métodos y determine cuáles son los clústers.
cluster1 <- cluster_leiden(ared)
membership(cluster2)
table(membership(cluster2))
plot(ared, cluster2)
####Enrique Franco Garcia - Problema 2 - 17/02/22
library(igraph)
####Enrique Franco Garcia - Problema 2 - 17/02/22
library(igraphdata)
data("karate")
karate
#3. El diámetro de la red.
diameter(karate)
#1.Encuentre las tres personas más conectadas.
karate_nodos <- degree(karate, mode = "in") #Creo un nuevo objeto y uso la funcion degree
#además uso "in", esto le va a indicar a R que debe de tomar en cuenta unicamente las entradas
pop <- sort(kararte_nodos, decreasing = T) [1:3] #Con esto voy a ordenar de mayor a menor e indicando
#además uso "in", esto le va a indicar a R que debe de tomar en cuenta unicamente las entradas
knodos <- sort(karate_nodos, decreasing = T) [1:3] #Con esto voy a ordenar de mayor a menor e indicando
#que unicamente quiero que selecione a los 3 primeros
knodos #Lo imprimo y visualizo que los 3 con mayor cantidad son Carolina, Maria Fernanda y Mayela
#2. La gráfica de la distribución de conectividades.
graf_dc <- degree_distribution(karate)
plot(graf_dc)
#3. El diámetro de la red.
diameter(karate)
plot(graf_dc)
#4. Las tres personas más importantes por tres medidas de centralidad
p <- sort(degree_distribution(ared, decreasing = T))
#4. Las tres personas más importantes por tres medidas de centralidad
p <- sort(degree_distribution(ared))
p
#4. Las tres personas más importantes por tres medidas de centralidad
p <- sort(degree_distribution(ared), decreasing = T)
p
#4. Las tres personas más importantes por tres medidas de centralidad
p <- sort(degree_distribution(ared), decreasing = T) [1:3]
p
p2 <- sort(degree(ared), decreasing = T)
p2
p2 <- sort(degree(ared), decreasing = T) [1:3]
p2
p3 <- sort(degree.distribution(ared), decreasing = T)[1:3]
p3
p3 <- sort(mean(ared), decreasing = T)[1:3]
#5. Clusteriza la red con al menos dos métodos y determine cuáles son los clústers.
cluster1 <- cluster_edge_betweenness(karate,directed = FALSE)
table(membership(eb))
table(membership(cluster1))
plot(karate)
plot(cluster1,karate)
plot(cluster2, karate)
table(membership(cluster2)) #Para visualizar la cantidad de individuos que tiene cada grupo del cluster
#4. El coeficiente de clusterización cada una de las 3 personas más conectadas
#5. Encuentre si los hay, a los nodos con coeficiente de clusterización de 1. Discute su significado.
#6. El porcentaje de conexiones respecto al total.
#7. El promedio de conectividades.
#8. Encuentre QUIÉNES son las 3 personas más importantes con al menos 3 distintos métodos
#9.Encuentre la trayectoria entre las personas más alejadas.
distances (yeast)
#4. El coeficiente de clusterización cada una de las 3 personas más conectadas
#5. Encuentre si los hay, a los nodos con coeficiente de clusterización de 1. Discute su significado.
#6. El porcentaje de conexiones respecto al total.
#7. El promedio de conectividades.
#8. Encuentre QUIÉNES son las 3 personas más importantes con al menos 3 distintos métodos
#9.Encuentre la trayectoria entre las personas más alejadas.
distances (karate)
View (distances (yeast)) #En caso de que se quieran ver las distancias por separado
View (distances (karate)) #En caso de que se quieran ver las distancias por separado
mean (distances(karate))
#4. El coeficiente de clusterización cada una de las 3 personas más conectadas
#5. Encuentre si los hay, a los nodos con coeficiente de clusterización de 1. Discute su significado.
#6. El porcentaje de conexiones respecto al total.
#7. El promedio de conectividades.
#8. Encuentre QUIÉNES son las 3 personas más importantes con al menos 3 distintos métodos
#9.Encuentre la trayectoria entre las personas más alejadas.
cam <- shortest.paths(karate)
cam
#4. El coeficiente de clusterización cada una de las 3 personas más conectadas
#5. Encuentre si los hay, a los nodos con coeficiente de clusterización de 1. Discute su significado.
#6. El porcentaje de conexiones respecto al total.
#7. El promedio de conectividades.
#8. Encuentre QUIÉNES son las 3 personas más importantes con al menos 3 distintos métodos
#9.Encuentre la trayectoria entre las personas más alejadas.
cam <- longest.paths(karate)
#4. El coeficiente de clusterización cada una de las 3 personas más conectadas
#5. Encuentre si los hay, a los nodos con coeficiente de clusterización de 1. Discute su significado.
#6. El porcentaje de conexiones respecto al total.
#7. El promedio de conectividades.
#8. Encuentre QUIÉNES son las 3 personas más importantes con al menos 3 distintos métodos
#9.Encuentre la trayectoria entre las personas más alejadas.
out <- degree(karate, mode = "out")
out
sort(out, decreasing = T)
sort(out, decreasing = F)
distances(karate, "Actor 12", "Jhon A")
#4. El coeficiente de clusterización cada una de las 3 personas más conectadas
sort(karate_nodos, decreasing = T)
transitivity(karate, type = "local")
sort(transitivity(r3, type = "local"), decreasing = T) [1:3]
sort(transitivity(karate, type = "local"), decreasing = T) [1:3]
sort(transitivity(karate, type = "local"), decreasing = T) [1:10]
sort(transitivity(karate, type = "local"), decreasing = F) [1:10]
sort(transitivity(karate, type = "local"), decreasing = F) [1:3]
#4. El coeficiente de clusterización cada una de las 3 personas más conectadas
sort(karate_nodos, decreasing = F)
#8. Encuentre QUIÉNES son las 3 personas más importantes con al menos 3 distintos métodos
m1 <- sort(degree_distribution(karate), decreasing = T) [1:3] #Los ordeno mediante
m1
m2 <- sort(degree(karate), decreasing = T) [1:3]
m2
#4. El coeficiente de clusterización cada una de las 3 personas más conectadas
sort(transitivity(karate, type = "local"), decreasing = T) [1:3]
#4. El coeficiente de clusterización cada una de las 3 personas más conectadas
sort(transitivity(karate, type = "local"), decreasing = T) [1:10]
#4. El coeficiente de clusterización cada una de las 3 personas más conectadas
sort(transitivity(karate, type = "local"), decreasing = F) [1:10]
#4. El coeficiente de clusterización cada una de las 3 personas más conectadas
sort(transitivity(karate, type = "local"), decreasing = T) [1:30]
#5. Encuentre si los hay, a los nodos con coeficiente de clusterización de 1. Discute su significado.
#6. El porcentaje de conexiones respecto al total.
#7. El promedio de conectividades.
promedio <- degree (karate) #esta es la suma, toma en cuenta todas las entradas y salidas
mean (promedio)
#de mayor a menor y selecionando unicamente los 3 primeros
m1 #Lo imprimo
m2 <- sort(degree(karate), decreasing = T) [1:3] #Los ordeno mediante degree
#de mayor a menor y selecionando unicamente los 3 primeros
m2 #Lo imprimo
m3 <- sort(closeness(karate), decreasing = T) [1:3]
m3
#9.Encuentre la trayectoria entre las personas más alejadas.
farthest.nodes(karate)
#4. El coeficiente de clusterización cada una de las 3 personas más conectadas
sort(transitivity(karate), decreasing = T) [1:3]
#5. Encuentre si los hay, a los nodos con coeficiente de clusterización de 1. Discute su significado.
transitivity(karate)
#5. Encuentre si los hay, a los nodos con coeficiente de clusterización de 1. Discute su significado.
transitivity(karate, type = "local")
#el degree distribution de mayor a menor para así tenerlos acomodados y solo le pido que
#me selecione a los 3 primeros usando corchetes
p #Lo imprimo
#de mayor a menor para así tenerlos acomodados y solo le pido que
#me selecione a los 3 primeros usando corchetes
p2 #Lo imprimo
#5. Clusteriza la red con al menos dos métodos y determine cuáles son los clústers.
cluster1 <- cluster_edge_betweenness(ared,directed = FALSE)
table(membership(cluster1))
plot(cluster1,ared)
#10. Clusteriza la red con al menos 4 métodos distintos y discute tu resultado sabiendo que ese grupo de personas se separo en dos clubes distintos con el tiempo.
clustera <- cluster_edge_betweenness(karate,directed = FALSE)
table(membership(cluster1))
plot(cluster1,karate)
plot(clustera,karate)
clusterb <- cluster_fast_greedy(karate)
clusterb <- cluster_fast_greedy(karate)
membership(clusterb)
table(membership(clusterb))
plot(clusterb,karate)
clusterc <- cluster_fluid_communities(karate)
membership(clusterc)
clusterc <- cluster_fast_greedy(karate)
membership(clusterc)
table(membership(clusterc))
plot(clusterc,karate)
plot(clusterc,karate)
plot(clusterc,karate)
clusterd <- cluster_infomap(karate)
membership(clusterd)
table(membership(clusterd))
plot(clusterd,karate)
#la convierto en matriz de adyacencia para de esta manera poder indicar que es una red dirigida
#1. Grafique la red
V(ared)$size <- degree(ared, mode = "in")
plot(ared, edge.arrow.size = .2, edge.curved =.8) #Aqui puedo modificar caracteristicas da la grafica como
